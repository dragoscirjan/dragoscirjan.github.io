"bundle";!function(){var a=System.amdDefine;a("app.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template> <require from="nav-bar.html"></require> <require from="bootstrap/css/bootstrap.css"></require> <require from="assets/bootswatch/darkly/bootstrap.min.css"></require> <require from="../jspm_packages/npm/highlight.js@9.2.0/styles/darkula.css"></require> <require from="assets/style.css"></require> <nav-bar router.bind="router"></nav-bar> <div class="page-host"> <router-view></router-view> </div> </template>'})}(),System.register("app.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c,d=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[],execute:function(){c=function(){function a(){b(this,a)}return d(a,[{key:"configureRouter",value:function(a,b){a.title="Coding Standars",a.map([{route:["","overview"],name:"overview",moduleId:"overview",nav:!0,title:"Overview"},{route:"formating",name:"formating",moduleId:"formating",nav:!0,title:"File Formating"},{route:"naming",name:"naming",moduleId:"naming",nav:!0,title:"Naming Convetions"},{route:"style",name:"style",moduleId:"style",nav:!0,title:"Coding Style"},{route:"style-html",name:"style-html",moduleId:"style-html",nav:!0,title:"Coding Style (HTML)"},{route:"recommend",name:"recommend",moduleId:"recommend",nav:!0,title:"Recommended Tools"}]),this.router=b}}]),a}(),a("App",c)}}}),System.register("blur-image.js",["aurelia-framework"],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b,c,e,f,g){if(!(isNaN(g)||1>g)){g|=0;var j,k=a.getContext("2d");try{j=k.getImageData(b,c,e,f)}catch(l){throw new Error("unable to access image data: "+l)}var m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K=j.data,L=g+g+1,M=e-1,N=f-1,O=g+1,P=O*(O+1)/2,Q=new d,R=Q;for(o=1;L>o;o++)if(R=R.next=new d,o==O)var S=R;R.next=Q;var T=null,U=null;s=r=0;var V=h[g],W=i[g];for(n=0;f>n;n++){for(B=C=D=E=t=u=v=w=0,x=O*(F=K[r]),y=O*(G=K[r+1]),z=O*(H=K[r+2]),A=O*(I=K[r+3]),t+=P*F,u+=P*G,v+=P*H,w+=P*I,R=Q,o=0;O>o;o++)R.r=F,R.g=G,R.b=H,R.a=I,R=R.next;for(o=1;O>o;o++)p=r+((o>M?M:o)<<2),t+=(R.r=F=K[p])*(J=O-o),u+=(R.g=G=K[p+1])*J,v+=(R.b=H=K[p+2])*J,w+=(R.a=I=K[p+3])*J,B+=F,C+=G,D+=H,E+=I,R=R.next;for(T=Q,U=S,m=0;e>m;m++)K[r+3]=I=w*V>>W,0!=I?(I=255/I,K[r]=(t*V>>W)*I,K[r+1]=(u*V>>W)*I,K[r+2]=(v*V>>W)*I):K[r]=K[r+1]=K[r+2]=0,t-=x,u-=y,v-=z,w-=A,x-=T.r,y-=T.g,z-=T.b,A-=T.a,p=s+((p=m+g+1)<M?p:M)<<2,B+=T.r=K[p],C+=T.g=K[p+1],D+=T.b=K[p+2],E+=T.a=K[p+3],t+=B,u+=C,v+=D,w+=E,T=T.next,x+=F=U.r,y+=G=U.g,z+=H=U.b,A+=I=U.a,B-=F,C-=G,D-=H,E-=I,U=U.next,r+=4;s+=e}for(m=0;e>m;m++){for(C=D=E=B=u=v=w=t=0,r=m<<2,x=O*(F=K[r]),y=O*(G=K[r+1]),z=O*(H=K[r+2]),A=O*(I=K[r+3]),t+=P*F,u+=P*G,v+=P*H,w+=P*I,R=Q,o=0;O>o;o++)R.r=F,R.g=G,R.b=H,R.a=I,R=R.next;for(q=e,o=1;g>=o;o++)r=q+m<<2,t+=(R.r=F=K[r])*(J=O-o),u+=(R.g=G=K[r+1])*J,v+=(R.b=H=K[r+2])*J,w+=(R.a=I=K[r+3])*J,B+=F,C+=G,D+=H,E+=I,R=R.next,N>o&&(q+=e);for(r=m,T=Q,U=S,n=0;f>n;n++)p=r<<2,K[p+3]=I=w*V>>W,I>0?(I=255/I,K[p]=(t*V>>W)*I,K[p+1]=(u*V>>W)*I,K[p+2]=(v*V>>W)*I):K[p]=K[p+1]=K[p+2]=0,t-=x,u-=y,v-=z,w-=A,x-=T.r,y-=T.g,z-=T.b,A-=T.a,p=m+((p=n+O)<N?p:N)*e<<2,t+=B+=T.r=K[p],u+=C+=T.g=K[p+1],v+=D+=T.b=K[p+2],w+=E+=T.a=K[p+3],T=T.next,x+=F=U.r,y+=G=U.g,z+=H=U.b,A+=I=U.a,B-=F,C-=G,D-=H,E-=I,U=U.next,r+=e}k.putImageData(j,b,c)}}function d(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}function e(a,b){var d=a.width,e=a.height,f=a.getContext("2d");f.drawImage(b,0,0,d,e),c(a,0,0,d,e,j)}var f,g,h,i,j,k=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[function(a){f=a.inject}],execute:function(){g=function(){function a(a){b(this,c),this.element=a}k(a,[{key:"valueChanged",value:function(a){var b=this;a.complete?e(this.element,a):a.onload=function(){return e(b.element,a)}}}]);var c=a;return a=f(Element)(a)||a}(),a("BlurImageCustomAttribute",g),h=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],i=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24],j=40}}}),function(){var a=System.amdDefine;a("child-router.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template> <section class="au-animate"> <h2>${heading}</h2> <div> <div class="col-md-2"> <ul class="well nav nav-pills nav-stacked"> <li repeat.for="row of router.navigation" class="${row.isActive ? \'active\' : \'\'}"> <a href.bind="row.href">${row.title}</a> </li> </ul> </div> <div class="col-md-10" style="padding:0"> <router-view></router-view> </div> </div> </section> </template>'})}(),System.register("child-router.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c,d=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[],execute:function(){c=function(){function a(){b(this,a),this.heading="Child Router"}return d(a,[{key:"configureRouter",value:function(a,b){a.map([{route:["","welcome"],name:"welcome",moduleId:"welcome",nav:!0,title:"Welcome"},{route:"users",name:"users",moduleId:"users",nav:!0,title:"Github Users"},{route:"child-router",name:"child-router",moduleId:"child-router",nav:!0,title:"Child Router"}]),this.router=b}}]),a}(),a("ChildRouter",c)}}}),function(){var a=System.amdDefine;a("code-template.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><div class="lang-ex"> <h5 id="c-c-c-35-">C/C++/C&#35;</h5> <h6 id="c">C</h6> <pre><code class="lang-c">// code here\n</code></pre> <h6 id="c-">C++</h6> <pre><code class="lang-cpp">// code here\n</code></pre> <h6 id="c-35-">C&#35;</h6> <pre><code class="lang-csharp">// code here\n</code></pre> <h5 id="coldfusion">ColdFusion</h5> <h6 id="cfml">CFML</h6> <pre><code class="lang-xml">&lt;!--- code here ---&gt;\n</code></pre> <h6 id="cfscript">CFScript</h6> <pre><code class="lang-javascript">// code here\n</code></pre> <h5 id="dart">Dart</h5> <pre><code class="lang-dart">// code here\n</code></pre> <h5 id="javascript">JavaScript</h5> <h6 id="ecmascript5-and-lower">ECMAScript5 and lower</h6> <pre><code class="lang-javascript">// code here\n</code></pre> <h6 id="ecmascript6">ECMAScript6</h6> <pre><code class="lang-javascript">// code here\n</code></pre> <h6 id="coffeescript">CoffeeScript</h6> <pre><code class="lang-coffeescript"># code here\n</code></pre> <h6 id="purescript">PureScript</h6> <pre><code class="lang-purescript">// code here\n</code></pre> <h6 id="typescript">TypeScript</h6> <pre><code class="lang-typescript">// code here\n</code></pre> <h5 id="java">Java</h5> <pre><code class="lang-java">// code here\n</code></pre> <h5 id="perl">Perl</h5> <pre><code class="lang-perl"># code here\n</code></pre> <h5 id="php">PHP</h5> <pre><code class="lang-php">// code here\n</code></pre> <h5 id="ruby">Ruby</h5> <pre><code class="lang-ruby">// code here\n</code></pre> <h5 id="python">Python</h5> <pre><code class="lang-python"># code here\n</code></pre> <h5 id="css">CSS</h5> <pre><code class="lang-css">/* your code here */\n</code></pre> <h5 id="html">HTML</h5> <pre><code class="lang-html">&lt;!-- your code here --&gt;\n</code></pre> </div> </div></div></section></template>'})}(),function(){var a=System.amdDefine;a("debugging.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><p>This document is a proposal. Please ignore it for now.</p> <p>= iOS HTML/CSS/JavaScript Debugging</p> <ul> <li><a href="http://people.apache.org/~pmuellr/weinre/">http://people.apache.org/~pmuellr/weinre/</a></li> </ul> </div></div></section></template>'})}(),function(){var a=System.amdDefine;a("formating.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><h1 id="file-formatting">File Formatting</h1> <h2 id="general">General</h2> <p>For files that contain <strong>only code</strong>, the closing tag is never permitted (when programming language allows it). I.e. it is not required by <a href="http://php.net/">PHP</a>, and omitting it prevents the accidental injection of trailing white space into the response.</p> <div class="lang-ex"> <h5 id="php">PHP</h5> <p class="note"><strong>Note</strong> Important: Inclusion of arbitrary binary data as permitted by __HALT_COMPILER() is prohibited from <a href="http://php.net/">PHP</a> files in the <a href="http://company.foo/">Foo Company LTD</a> projects or files derived from them. Use of this feature is only permitted for some installation scripts.</p> </div> <h3 id="-editorconfig-http-editorconfig-org-"><a href="http://editorconfig.org/">Editorconfig</a></h3> <p>In order to standardize all IDE configurations, we recommend the EditorConfig standard.</p> <p>What is EditorConfig? EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.</p> <p>Further more, the use of the the following <a href="../../../raw/master/.editorconfig">.editorconfig</a> (as a base) is mandatory in any project developed by <a href="http://company.foo/">Foo Company LTD</a>.</p> <h3 id="maximum-line-length">Maximum Line Length</h3> <p>The target line length is 100 characters. That is to say, <a href="http://company.foo/">Foo Company LTD</a> developers should strive keep each line of their code under 100 characters where possible and practical. However, longer lines are acceptable in some circumstances. The maximum length of any line of code is 140 characters.</p> <p><em>Thus said, please configure your IDEs accordingly.</em></p> </div></div></section></template>'})}(),System.register("formating.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c;return{setters:[],execute:function(){c=function d(){b(this,d)},a("Overview",c)}}}),System.register("main.js",["bootstrap"],function(a){"use strict";function b(a){a.use.standardConfiguration().developmentLogging(),a.start().then(function(){return a.setRoot()})}return a("configure",b),{setters:[function(a){}],execute:function(){}}}),function(){var a=System.amdDefine;a("naming-conventions.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><h1 id="naming-conventions">Naming Conventions</h1> <p class="note"><strong>Note</strong> This document is a draft and it will remain so. It is your duty as a developer to continuously improve this document and your knowledge of this document.</p> <p class="note"><strong>Note</strong> This document in inspired from <a href="http://framework.zend.com/manual/1.12/en/coding-standard.naming-conventions.html">Zend Framework&#39;s Coding Standards</a>. If you have any other suggestion, please comment in our issue section.</p> <h2 id="classes">Classes</h2> <p>For class naming, it is mandatory to use <a href="https://en.wikipedia.org/wiki/CamelCase">CamelCase</a> naming style unless programming language impose otherwise, or project manager / system architect decided otherwise.</p> <p>When continuing/extending a 3rd party project, it is recommended to continue with the namin convention imposed/used by that specific project.</p> <div class="lang-ex"> <h5 id="php">PHP</h5> <p>For project that were developed under PHP-5.2 and lower and were not refactored as PHP5.3+ project, we standardize on a class naming convention whereby the names of the classes directly map to the directories in which they are stored.</p> </div> <p><strong> TO BE CONTINUED </strong></p> <p>=========</p> <p>The root level directory of Zend Framework&#39;s standard library is the &quot;Zend/&quot; directory, whereas the root level directory of Zend Framework&#39;s extras library is the &quot;ZendX/&quot; directory. All Zend Framework classes are stored hierarchically under these root directories..</p> <p>Class names may only contain alphanumeric characters. Numbers are permitted in class names but are discouraged in most cases. Underscores are only permitted in place of the path separator; the filename &quot;Zend/Db/Table.php&quot; must map to the class name &quot;Zend_Db_Table&quot;.</p> <p>If a class name is comprised of more than one word, the first letter of each new word must be capitalized. Successive capitalized letters are not allowed, e.g. a class &quot;Zend_PDF&quot; is not allowed while &quot;Zend_Pdf&quot; is acceptable.</p> <p>These conventions define a pseudo-namespace mechanism for Zend Framework. Zend Framework will adopt the PHP namespace feature when it becomes available and is feasible for our developers to use in their applications.</p> <p>See the class names in the standard and extras libraries for examples of this classname convention.</p> <p>Note: Important: Code that must be deployed alongside Zend Framework libraries but is not part of the standard or extras libraries (e.g. application code or libraries that are not distributed by Zend) must never start with &quot;Zend<em>&quot; or &quot;ZendX</em>&quot;.</p> <p>##Abstract Classes In general, abstract classes follow the same conventions as classes, with one additional rule: abstract class names must end in the term, &quot;Abstract&quot;, and that term must not be preceded by an underscore. As an example, Zend_Controller_Plugin_Abstract is considered an invalid name, but Zend_Controller_PluginAbstract or Zend_Controller_Plugin_PluginAbstract would be valid names.</p> <p>Note: This naming convention is new with version 1.9.0 of Zend Framework. Classes that pre-date that version may not follow this rule, but will be renamed in the future in order to comply. The rationale for the change is due to namespace usage. As we look towards Zend Framework 2.0 and usage of PHP 5.3, we will be using namespaces. The easiest way to automate conversion to namespaces is to simply convert underscores to the namespace separator -- but under the old naming conventions, this leaves the classname as simply &quot;Abstract&quot; or &quot;Interface&quot; -- both of which are reserved keywords in PHP. If we prepend the (sub)component name to the classname, we can avoid these issues. To illustrate the situation, consider converting the class Zend_Controller_Request_Abstract to use namespaces:</p> <p>namespace Zend\\Controller\\Request;</p> <p>abstract class Abstract { // ... } Clearly, this will not work. Under the new naming conventions, however, this would become: namespace Zend\\Controller\\Request;</p> <p>abstract class RequestAbstract { // ... } We still retain the semantics and namespace separation, while omitting the keyword issues; simultaneously, it better describes the abstract class.</p> <p>##Interfaces In general, interfaces follow the same conventions as classes, with one additional rule: interface names may optionally end in the term, &quot;Interface&quot;, but that term must not be preceded by an underscore. As an example, Zend_Controller_Plugin_Interface is considered an invalid name, but Zend_Controller_PluginInterface or Zend_Controller_Plugin_PluginInterface would be valid names.</p> <p>While this rule is not required, it is strongly recommended, as it provides a good visual cue to developers as to which files contain interfaces rather than classes.</p> <p>Note: This naming convention is new with version 1.9.0 of Zend Framework. Classes that pre-date that version may not follow this rule, but will be renamed in the future in order to comply. See the previous section for more information on the rationale for this change.</p> <p>##Filenames For all other files, only alphanumeric characters, underscores, and the dash character (&quot;-&quot;) are permitted. Spaces are strictly prohibited.</p> <p>Any file that contains PHP code should end with the extension &quot;.php&quot;, with the notable exception of view scripts. The following examples show acceptable filenames for Zend Framework classes:</p> <p>Zend/Db.php</p> <p>Zend/Controller/Front.php</p> <p>Zend/View/Helper/FormRadio.php File names must map to class names as described above.</p> <p>##Functions and Methods Function names may only contain alphanumeric characters. Underscores are not permitted. Numbers are permitted in function names but are discouraged in most cases.</p> <p>Function names must always start with a lowercase letter. When a function name consists of more than one word, the first letter of each new word must be capitalized. This is commonly called &quot;camelCase&quot; formatting.</p> <p>Verbosity is generally encouraged. Function names should be as verbose as is practical to fully describe their purpose and behavior.</p> <p>These are examples of acceptable names for functions:</p> <p>filterInput()</p> <p>getElementById()</p> <p>widgetFactory() For object-oriented programming, accessors for instance or static variables should always be prefixed with &quot;get&quot; or &quot;set&quot;. In implementing design patterns, such as the singleton or factory patterns, the name of the method should contain the pattern name where practical to more thoroughly describe behavior.</p> <p>For methods on objects that are declared with the &quot;private&quot; or &quot;protected&quot; modifier, the first character of the method name must be an underscore. This is the only acceptable application of an underscore in a method name. Methods declared &quot;public&quot; should never contain an underscore.</p> <p>Functions in the global scope (a.k.a &quot;floating functions&quot;) are permitted but discouraged in most cases. Consider wrapping these functions in a static class.</p> <p>##Variables Variable names may only contain alphanumeric characters. Underscores are not permitted. Numbers are permitted in variable names but are discouraged in most cases.</p> <p>For instance variables that are declared with the &quot;private&quot; or &quot;protected&quot; modifier, the first character of the variable name must be a single underscore. This is the only acceptable application of an underscore in a variable name. Member variables declared &quot;public&quot; should never start with an underscore.</p> <p>As with function names (see section 3.3) variable names must always start with a lowercase letter and follow the &quot;camelCaps&quot; capitalization convention.</p> <p>Verbosity is generally encouraged. Variables should always be as verbose as practical to describe the data that the developer intends to store in them. Terse variable names such as &quot;$i&quot; and &quot;$n&quot; are discouraged for all but the smallest loop contexts. If a loop contains more than 20 lines of code, the index variables should have more descriptive names.</p> <p>##Constants Constants may contain both alphanumeric characters and underscores. Numbers are permitted in constant names.</p> <p>All letters used in a constant name must be capitalized, while all words in a constant name must be separated by underscore characters.</p> <p>For example, EMBED_SUPPRESS_EMBED_EXCEPTION is permitted but EMBED_SUPPRESSEMBEDEXCEPTION is not.</p> <p>Constants must be defined as class members with the &quot;const&quot; modifier. Defining constants in the global scope with the &quot;define&quot; function is permitted but strongly discouraged.</p> <p><hr> <a href="file-formating.md">&laquo; File Formating</a> / <a href="coding-style.md">Coding Style &raquo;</a></p> </div></div></section></template>'})}(),function(){var a=System.amdDefine;a("naming.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><h1 id="naming-conventions">Naming Conventions</h1> <p class="note"><strong>Note</strong>: This document is a draft and it will remain so. It is your duty as a developer to continuously improve this document and your knowledge of this document.</p> <p class="note"><strong>Note</strong>: When continuing/extending a 3rd party project, it is recommended to continue with the naming convention imposed/used by that specific project.</p> <h2 id="classes">Classes</h2> <p>For class naming, it is mandatory to use <a href="https://en.wikipedia.org/wiki/CamelCase">CamelCase</a> naming style unless programming language impose otherwise, or project manager / system architect decided otherwise. First letter of the class name must also be upper case.</p> <pre><code class="lang-java">class MyCamelCaseName\n{\n  // your class code here\n}\n</code></pre> <h2 id="functions-methods">Functions/Methods</h2> <p>For function/method naming, it is mandatory to use <a href="https://en.wikipedia.org/wiki/CamelCase">camelCase</a> naming style unless programming language impose otherwise, or project manager / system architect decided otherwise. Oposed to class names, first letter of the method/function name must be lower case.</p> <pre><code class="lang-php">class MyCamelCaseName {\n\n  public function myCamelCaseMethod()\n  {\n    // your function code here\n  }\n\n}\n\nfunction myCamelCaseFunction()\n{\n  // your function code here\n}\n</code></pre> <h2 id="namespaces">Namespaces</h2> <p>As much as possible, namespaces will be defined wil lower case and be formed of simpler explanatory words. Namespace naming should always start with the following 3 components</p> <ol> <li><strong>com</strong> or <strong>org</strong> to disociate commercial projects from open source once</li> <li>Project Name or company name followed by project name </li> <li>Package name</li> </ol> <p>Given archiect or manger&#39;s choice, Project/Company name be skipped.</p> <pre><code class="lang-java">namespace org.company.project.package.subpackage;\n\nclass MyCamelCaseName\n{\n\n}\n</code></pre> <p>For some languages, we recommend skipping the <code>org</code> prefix in case of open source packages; however in order to avoid namespace colision when both commercial and open source packages are installed, the commercial packages should always have the <code>com</code> prefix</p> <div class="lang-ex"> <p>Before <a href="http://en.cppreference.com/w/cpp/language/namespace">C++ v17</a> you could not use nested </p> <h5 id="c-c-c-35-">C/C++/C&#35;</h5> <pre><code class="lang-cpp">// before C++ v17\nnamespace Company_Project_Package_Subpackage\n{\n  // your code here\n}\n\n// after C++ v17\nnamespace company::project::package::subpackage\n{\n  // your code here\n}\n</code></pre> <pre><code class="lang-csharp">@TODO:\n</code></pre> <h5 id="cfml">CFML</h5> <p>ColdFusion does not have </p> <p><code>org/company/project/package/subpackage/ComponentName.cfc</code></p> <pre><code class="lang-xml">&lt;cfcomponent displayName=&quot;ComponentName&quot; output=&quot;no&quot;&gt; \n  &lt;!-- your code here --&gt;\n&lt;/cfcomponent&gt;\n</code></pre> <pre><code class="lang-javascript">component displayName=&#39;ComponentName&#39; output=&#39;no&#39; {\n\n}\n</code></pre> <h5 id="dart">Dart</h5> <p>Dart does not have namespaces, however, you can emulate it via folders. Dart language has the <code>import</code> protocol, for loading a library to another file.</p> <p><code>org/company/project/package/subpackage/ClassName.dart</code></p> <pre><code class="lang-dart">class ClassName  {\n  // your code here\n}\n</code></pre> <h5 id="javascript">JavaScript</h5> <p>Nor Javascript nor CoffeScript won&#39;t have namespaces, however they can be emulated through variables and file paths.</p> <h6 id="ecmascript5-and-lower">ECMAScript5 and lower</h6> <p><code>org/company/package/subpackage/ClassName.js</code></p> <pre><code class="lang-javascript">window.org = org || {};\norg.company = org.company || {};\norg.company.package = org.company.package || {};\norg.company.package.subpackage = org.company.package.subpackage || {};\norg.company.package.subpackage.ClassName = function() {\n  // your code here\n};\n</code></pre> <h6 id="ecmascript6">ECMAScript6</h6> <p><code>org/company/project/package/subpackage/ClassName.js</code></p> <pre><code class="lang-javascript">expor class ClassName {\n\n}\n</code></pre> <h6 id="coffeescript">CoffeeScript</h6> <p><code>org/company/project/package/subpackage/ClassName.coffee</code></p> <pre><code class="lang-coffeescript">window.org or= {}\norg.company or= {}\norg.company.package or= {}\norg.company.package.subpackage or= {}\norg.company.package.subpackage.ClassName = class ClassName\n  # your code here\n</code></pre> <h6 id="purescript">PureScript</h6> <pre><code class="lang-javascript">// @TODO\n</code></pre> <h6 id="typescript">TypeScript</h6> <pre><code class="lang-typescript">// @TODO\n</code></pre> <h5 id="java">Java</h5> <pre><code class="lang-java">namespace org.company.project.package.subpackage;\n\nclass ClassName {\n\n}\n</code></pre> <h5 id="perl">Perl</h5> <pre><code class="lang-perl"># @TODO\n</code></pre> <h5 id="php">PHP</h5> <p>For project that were developed under PHP-5.2 and lower and were not refactored as PHP5.3+ project, we standardize on a class naming convention whereby the names of the classes directly map to the directories in which they are stored.</p> <pre><code class="lang-php">// for php under v5.2\n\nclass Company_Project_Package_Subpackage_ClassName {\n\n}\n\n// for php v5.2 and more\nnamsespace Company\\Project\\Package\\Subpackage;\n\nclass ClassName {\n\n}\n</code></pre> <h5 id="ruby">Ruby</h5> <pre><code class="lang-ruby"># @TODO\n# https://rubymonk.com/learning/books/1-ruby-primer/chapters/35-modules/lessons/80-modules-as-namespaces\n# http://stackoverflow.com/questions/7821459/whats-the-difference-between-these-ruby-namespace-conventions\n</code></pre> <h5 id="python">Python</h5> <pre><code class="lang-python"># @TODO\n</code></pre> </div> <h2 id="folders">Folders</h2> <p>@TODO</p> <h3 id="frameworks-libraries-modules">Frameworks / Libraries / Modules</h3> <p>@TODO The root level directory of Zend Framework&#39;s standard library is the &quot;Zend/&quot; directory, whereas the root level directory of Zend Framework&#39;s extras library is the &quot;ZendX/&quot; directory. All Zend Framework classes are stored hierarchically under these root directories.</p> <h3 id="applications">Applications</h3> <p>@TODO</p> </div></div></section></template>'})}(),System.register("naming.js",["assets/abstract"],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function, not "+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}var d,e,f=function(a,b,c){for(var d=!0;d;){var e=a,f=b,g=c;d=!1,null===e&&(e=Function.prototype);var h=Object.getOwnPropertyDescriptor(e,f);if(void 0!==h){if("value"in h)return h.value;var i=h.get;if(void 0===i)return;return i.call(g)}var j=Object.getPrototypeOf(e);if(null===j)return;a=j,b=f,c=g,d=!0,h=j=void 0}};return{setters:[function(a){d=a.Component}],execute:function(){e=function(a){function d(){b(this,d),f(Object.getPrototypeOf(d.prototype),"constructor",this).apply(this,arguments)}return c(d,a),d}(d),a("Component",e)}}}),function(){var a=System.amdDefine;a("nav-bar.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template bindable="router"> <nav class="navbar navbar-default navbar-fixed-top" role="navigation"> <div class="navbar-header"> <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#skeleton-navigation-navbar-collapse"> <span class="sr-only">Toggle Navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> <a class="navbar-brand" href="#"> <i class="fa fa-home"></i> <span>${router.title}</span> </a> </div> <div class="collapse navbar-collapse" id="skeleton-navigation-navbar-collapse"> <ul class="nav navbar-nav"> <li repeat.for="row of router.navigation" class="${row.isActive ? \'active\' : \'\'}"> <a data-toggle="collapse" data-target="#skeleton-navigation-navbar-collapse.in" href.bind="row.href">${row.title}</a> </li> </ul> <ul class="nav navbar-nav navbar-right"> <li class="loader" if.bind="router.isNavigating"> <i class="fa fa-spinner fa-spin fa-2x"></i> </li> </ul> </div> </nav> </template>'})}(),function(){var a=System.amdDefine;a("overview.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template><section class="au-animate"><div class="container bs-docs-container"><div class="row"><h1 id="overview">Overview</h1> <h2 id="scope">Scope</h2> <p>This document provides guidelines for code formatting and documentation to individuals and teams contributing to <a href="http://company.foo/">Foo Company LTD</a> products. Many developers using <a href="http://company.foo/">Foo Company LTD</a> products have also found these coding standards useful because their code&#39;s style remains consistent with all <a href="http://company.foo/">Foo Company LTD</a> products code. It is also worth noting that it requires significant effort to fully specify coding standards.</p> <p class="note"><strong>Note</strong>: Sometimes developers consider the establishment of a standard more important than what that standard actually suggests at the most detailed level of design. The guidelines in <a href="http://company.foo/">Foo Company LTD</a> products&#39; coding standards capture practices that have worked well on the <a href="http://company.foo/">Foo Company LTD</a> products project. You may modify these standards or use them as is in accordance with the terms of our <a href="https://raw.githubusercontent.com/dragoscirjan/coding-standards/master/LICENSE">» license</a>.</p> <p>Topics covered in <a href="http://company.foo/">Foo Company LTD</a> products&#39; coding standards include:</p> <ul> <li><a href="formating.md">File Formatting</a></li> <li><a href="naming.md">Naming Conventions</a></li> <li><a href="style.md">Coding Style</a></li> <li><a href="css-style.md">CSS Coding Style</a></li> <li><a href="recommended-tools.md">Recommended Tools</a></li> </ul> <p class="note"><strong>Note</strong>: Mainly <a href="http://company.foo/">Foo Company LTD</a> is a <a href="http://php.net/">PHP</a> company, thus all documentation written further will be developed over <a href="http://php.net/">PHP</a> coding language.</p> <p>However, <a href="http://php.net/">PHP</a> is not the only language we are using, so we tried extending and adapting coding standards to all coding languages used in our company. Also, with each adopted coding language, we engage in adding and adapting our coding standards to that specific language as well.</p> <p>Languages included in <a href="http://company.foo/">Foo Company LTD</a> products&#39; coding standards include:</p> <ul> <li><a href="http://www.adobe.com">Adobe</a><sup>&copy;</sup> <a href="http://www.adobe.com/products/coldfusion-family.html">ColdFusion</a></li> <li><a href="https://en.wikipedia.org/wiki/List_of_C-family_programming_languages">C</a> (syntax) based<ul> <li><a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a></li> <li><a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language">C&#35;</a>)</li> <li><a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a>,<ul> <li><a href="https://github.com/lukehoban/es6features">EcmaScript 6</a></li> <li><a href="http://coffeescript.org">CoffeeScript</a></li> <li><a href="http://microsoft.com">Microsoft</a><sup>&copy;</sup> <a href="http://www.typescriptlang.org">TypeScript</a> (TODO)</li> <li><a href="http://www.purescript.org">PureScript</a> (TODO)</li> </ul> </li> <li><a href="http://code.google.com/p/dart">Google</a><sup>&copy;</sup> <a href="https://www.dartlang.org">Dart</a></li> <li><a href="https://www.oracle.com">Oracle</a><sup>&copy;</sup> <a href="https://www.oracle.com/java/index.html">Java</a></li> </ul> </li> <li><a href="https://www.perl.org">Perl</a></li> <li><a href="http://php.net">PHP</a></li> <li><a href="https://www.python.org">Python</a></li> <li><a href="http://ruby.com">Ruby</a></li> <li><a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">Css</a> (not completed)<ul> <li><a href="http://lesscss.org">Less</a> (not completed)</li> <li><a href="http://sass-lang.com">Sass/Scss</a> (not completed)</li> </ul> </li> <li><a href="https://en.wikipedia.org/wiki/HTML">Html</a> (not completed)<ul> <li><a href="http://jade-lang.com">Jade</a> (not completed)</li> </ul> </li> </ul> <h2 id="goals">Goals</h2> <p>Coding standards are important in any development project, but they are particularly important when many developers are working on the same project. Coding standards help ensure that the code is high quality, has fewer bugs, and can be easily maintained.</p> <h2 id="influences">Influences</h2> <ul> <li><a href="http://framework.zend.com/manual/current/en/ref/coding.standard.html">Zend Framework Coding Standard for PHP</a></li> <li><a href="https://www.drupal.org/coding-standards">Drupal Coding Standars</a></li> <li><a href="http://symfony.com/doc/current/contributing/code/standards.html">Symfony Coding Standards</a></li> <li><a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-139411.html#16711">Code Conventions for the Java Programming Language</a></li> <li><a href="https://www.python.org/dev/peps/pep-0008/">Style Guide for Python Code</a></li> </ul> </div></div></section></template>';
})}(),System.register("overview.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c;return{setters:[],execute:function(){c=function d(){b(this,d)},a("Overview",c)}}}),System.register("scripts.js",[],function(a){"use strict";return{setters:[],execute:function(){!function(a){var b=1;a(".lang-ex").each(function(){var c=a(this),d=a('<ul class="nav nav-tabs" role="tablist"></ul>'),e=a('<div class="tab-content"></div>');c.find("h5").each(function(){var c=a('<li role="presentation"><a href="#li-item-'+b+'" aria-controls="li-item-'+b+'" role="tab" data-toggle="tab"></a></li>'),f=a('<div role="tabpanel" class="tab-pane" id="li-item-'+b++ +'"></div>'),g=null,h=0;for(this.innerHTML.match(/TODO/)?c.find("a").addClass("disabled").attr("data-toggle","").tooltip({title:"Content not available. Care to help designing it?"}).html(this.innerHTML.replace(/\s*TODO\s*/,"")):c.find("a").html(this.innerHTML);50>h&&(g=g&&g.length?g.next():a(this).next(),g&&"H5"!=g.prop("tagName"));)f.append(g),h++;d.append(c),e.append(f)}),c.html(""),c.append(d),c.append(e),d.find("li:first").addClass("active"),e.find("div:first").addClass("active")}),a("pre > code").each(function(b,c){var d=a(c);d.hasClass("lang-cfml")&&d.addClass("lang-xml"),hljs.highlightBlock(c)}),a(".nav-tabs[role=tablist]").each(function(b,c){a(c).find("a").not(".disabled").filter(":first").trigger("click")})}(jQuery)}}}),function(){var a=System.amdDefine;a("style.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template> <section class="au-animate"> <h2>${heading}</h2> <div> <div class="col-md-2"> <ul class="well nav nav-pills nav-stacked"> <li repeat.for="row of router.navigation" class="${row.isActive ? \'active\' : \'\'}"> <a href.bind="row.href">${row.title}</a> </li> </ul> </div> <div class="col-md-10" style="padding:0"> <router-view></router-view> </div> </div> </section> </template>'})}(),System.register("style.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c,d=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[],execute:function(){c=function(){function a(){b(this,a),this.heading="Coding Style"}return d(a,[{key:"configureRouter",value:function(a,b){a.map([{route:["","code-demarcation"],name:"cs-code-demarcation",moduleId:"style/05.code-demarcation",nav:!0,title:"Code Demarcation"},{route:"control-statements",name:"cs-control-statements",moduleId:"style/10.control-statements",nav:!0,title:"Control Statements"},{route:"strings",name:"cs-strings",moduleId:"style/15.strings",nav:!0,title:"Strings"},{route:"arrays",name:"cs-arrays",moduleId:"style/20.arrays",nav:!0,title:"Arrays"},{route:"classes",name:"cs-classes",moduleId:"style/45.classes",nav:!0,title:"Classes"},{route:"methods",name:"cs-class-methods",moduleId:"style/50.class-methods",nav:!0,title:"Functions & Methods"},{route:"inline-documentation",name:"cs-inline-documentation",moduleId:"style/80.inline-documentation",nav:!0,title:"Inline Documentation"}]),this.router=b}}]),a}(),a("Component",c)}}}),function(){var a=System.amdDefine;a("users.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template> <require from="blur-image"></require> <section class="au-animate"> <h2>${heading}</h2> <div class="row au-stagger"> <div class="col-sm-6 col-md-3 card-container au-animate" repeat.for="user of users"> <div class="card"> <canvas class="header-bg" width="250" height="70" blur-image.bind="image"></canvas> <div class="avatar"> <img src.bind="user.avatar_url" crossorigin ref="image"> </div> <div class="content"> <p class="name">${user.login}</p> <p><a target="_blank" class="btn btn-default" href.bind="user.html_url">Contact</a></p> </div> </div> </div> </div> </section> </template>'})}(),System.register("users.js",["aurelia-framework","aurelia-fetch-client","fetch"],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c,d,e,f=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[function(a){c=a.inject},function(a){d=a.HttpClient},function(a){}],execute:function(){e=function(){function a(a){b(this,e),this.heading="Github Users",this.users=[],a.configure(function(a){a.useStandardConfiguration().withBaseUrl("https://api.github.com/")}),this.http=a}f(a,[{key:"activate",value:function(){var a=this;return this.http.fetch("users").then(function(a){return a.json()}).then(function(b){return a.users=b})}}]);var e=a;return a=c(d)(a)||a}(),a("Users",e)}}}),function(){var a=System.amdDefine;a("welcome.html!github:systemjs/plugin-text@0.0.3.js",[],function(){return'<template> <section class="au-animate"> <h2>${heading}</h2> <form role="form" submit.delegate="submit()"> <div class="form-group"> <label for="fn">First Name</label> <input value.bind="firstName" class="form-control" id="fn" placeholder="first name"> </div> <div class="form-group"> <label for="ln">Last Name</label> <input value.bind="lastName" class="form-control" id="ln" placeholder="last name"> </div> <div class="form-group"> <label>Full Name</label> <p class="help-block">${fullName | upper}</p> </div> <button type="submit" class="btn btn-default">Submit</button> </form> </section> </template>'})}(),System.register("welcome.js",[],function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var c,d,e=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();return{setters:[],execute:function(){c=function(){function a(){b(this,a),this.heading="Welcome to the Aurelia Navigation App!",this.firstName="John",this.lastName="Doe",this.previousValue=this.fullName}return e(a,[{key:"submit",value:function(){this.previousValue=this.fullName,alert("Welcome, "+this.fullName+"!")}},{key:"canDeactivate",value:function(){return this.fullName!==this.previousValue?confirm("Are you sure you want to leave?"):void 0}},{key:"fullName",get:function(){return this.firstName+" "+this.lastName}}]),a}(),a("Welcome",c),d=function(){function a(){b(this,a)}return e(a,[{key:"toView",value:function(a){return a&&a.toUpperCase()}}]),a}(),a("UpperValueConverter",d)}}});